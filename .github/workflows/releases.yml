name: Build and Release Binaries

on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  SRC: 'src/main.cpp'
  SRCWIN: 'src\\main.cpp'
  BUILD_DIR: 'build'
  DIST_DIR: 'dist'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            artifact_name: maze-linux-x64
          - os: windows-latest
            target: windows
            artifact_name: maze-win64
          - os: macos-latest
            target: macos
            artifact_name: maze-macos

    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      ########################
      #        Linux         #
      ########################

      - name: Download and extract static SFML Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -LO https://www.sfml-dev.org/files/SFML-2.6.2-linux-gcc-64-bit.tar.gz
          mkdir sfml
          tar -xzf SFML-2.6.2-linux-gcc-64-bit.tar.gz -C sfml --strip-components=1
          echo "SFML_STATIC_PATH=$(pwd)/sfml" >> $GITHUB_ENV

      - name: Build (Linux, static SFML)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          g++ -std=c++17 -O2 \
            -I$SFML_STATIC_PATH/include \
            -L$SFML_STATIC_PATH/lib \
            -o ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }} \
            ${{ env.SRC }} \
            -Wl,-Bstatic -lsfml-graphics -lsfml-window -lsfml-system \
            -Wl,-Bdynamic -lfreetype -lGL -lX11 -lXrandr -lXcursor -lXinerama -lXi -lXext -lXrender -pthread -ldl -lm \
            -static-libgcc -static-libstdc++

      - name: Check dynamic dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          ldd ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }} || true

      - name: Copy font file (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cp ./arial.ttf ${{ env.BUILD_DIR }}/arial.ttf

      - name: Package Linux release (safe)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist_tmp
          cp -r ${{ env.BUILD_DIR }}/* dist_tmp/
          tar -czf ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }}.tar.gz -C dist_tmp .

      ########################
      #        macOS         #
      ########################

      - name: Download SFML (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl -L -o sfml.tar.gz https://www.sfml-dev.org/files/SFML-2.6.2-macOS-clang-arm64.tar.gz
          mkdir -p sfml
          tar -xzf sfml.tar.gz -C sfml --strip-components=1
          echo "SFML_PATH=$(pwd)/sfml" >> $GITHUB_ENV

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          g++ -std=c++17 -O2 \
            -I$SFML_PATH/include \
            -L$SFML_PATH/lib \
            -o ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }} \
            ${{ env.SRC }} \
            -lsfml-graphics -lsfml-window -lsfml-system \
            -g3

      - name: Copy SFML dylibs (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cp $SFML_PATH/lib/*.dylib ${{ env.BUILD_DIR }}/
      - name: Adjust rpath for dylibs (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          chmod +w ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }}
          install_name_tool -add_rpath "@executable_path" ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }}
      - name: Copy font file (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cp ./arial.ttf ${{ env.BUILD_DIR }}/arial.ttf

      - name: Package macOS release
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p dist_tmp
          cp -r ${{ env.BUILD_DIR }}/* dist_tmp/
          tar -czf ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }}.tar.gz -C dist_tmp .

      ########################
      #       Windows        #
      ########################

      - name: Download SFML & MinGW (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          curl -L -o mingw64.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/13.1.0-16.0.5-11.0.0-msvcrt-r5/winlibs-x86_64-posix-seh-gcc-13.1.0-mingw-w64msvcrt-11.0.0-r5.zip 
          powershell -Command Expand-Archive -Path .\SFML-2.6.2.zip -DestinationPath sfml
          powershell -Command Expand-Archive -Path mingw64.zip -DestinationPath .

      - name: Build (Windows with MinGW 13.1.0)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          set PATH=%cd%.\mingw64\bin;%PATH%
          mkdir build
          g++ -std=c++17 -O2 ^
            -Isfml\SFML-2.6.2\include ^
            -Lsfml\SFML-2.6.2\lib ^
            -o build\${{ matrix.artifact_name }} ^
            ${{ env.SRCWIN }} ^
            -lsfml-graphics -lsfml-window -lsfml-system ^
            -g3

      - name: Copy DLLs (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Copy-Item -Path sfml\SFML-2.6.2\bin\*.dll -Destination build\
          Copy-Item -Path .\mingw64\bin\*.dll -Destination build\
          Copy-Item -Path .\arial.ttf -Destination build\

      - name: Package Windows release
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Compress-Archive -Path build\* -DestinationPath ${{ env.BUILD_DIR }}\${{ matrix.artifact_name }}.zip

      ########################
      #   Upload Artifacts   #
      ########################

      - name: Upload binary
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }}.tar.gz

      - name: Upload zip archive (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-portable
          path: ${{ env.BUILD_DIR }}/${{ matrix.artifact_name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.DIST_DIR }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Maze Build
          body: "Automatic build from push to `main`"
          files: ${{ env.DIST_DIR }}/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
